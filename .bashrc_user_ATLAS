#!/usr/bin/env bash

# User specific functions
export CLICOLOR=1

alias fullpath="readlink -f"

export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
# Allows for working with wrappers as well
source "${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh" --quiet || echo "~~~ERROR: setupATLAS failed!~~~"

export RUCIO_ACCOUNT=feickert

# Ensure EDITOR is set for use by bash's 'edit-and-execute-command'
if [ -z "${EDITOR}" ]; then
    export EDITOR="$(command -v vim)"
fi

# Enable Git bash completions
if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
fi

# Ensure that uv is installed
if ! command -v uv >/dev/null 2>&1; then
    echo "# Installing uv..."
    # Check if pixi exists
    if command -v pixi >/dev/null 2>&1; then
      # Use pixi global
      echo "# Installing with pixi global..."
      pixi global install uv
    else
      # Install from https://astral.sh/
      echo "# Installing from https://astral.sh/..."
      curl -LsSf https://astral.sh/uv/install.sh | sh
    fi

    # Ensure ~/.local/bin is on the PATH for uv
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        export PATH="${HOME}/.local/bin:${PATH}"
    fi
fi

# Use a function over sourcing on load to reduce login time
function setupENV {
    # Setup default LCG view
    local default_LCG_release="LCG_98python3"
    local default_LCG_platform="x86_64-centos7-gcc8-opt"
    printf "\nlsetup 'views ${default_LCG_release} ${default_LCG_platform}'\n"
    lsetup "views ${default_LCG_release} ${default_LCG_platform}"
    # strip out LGG view site-packages from PYTHONPATH to allow venv control of pip
    IFS=':' read -ra _LCG_paths <<< "${PYTHONPATH}"
    for idx in "${!_LCG_paths[@]}"
    do
        [[ "${_LCG_paths[$idx]}" == *"site-packages"* ]] && unset -v "_LCG_paths[${idx}]"
    done
    export PYTHONPATH=$(IFS=:; echo "${_LCG_paths[*]}")

    # default venv from `virtualenv "${HOME}/.venvs/base"`
    if [ -d "${HOME}/.venvs/base" ]; then
        source "${HOME}/.venvs/base/bin/activate"
    fi
}

# Utility function for setting up ATLAS Athena dev environment
function setup-athena-dev-environment () {
    # Example:
    # setup-athena-dev-environment --org atlas-asg --repository columnar-athena --branch columnar --fetch-depth 50 --directory debug-columnar-athena

    local ORG="atlas"
    local REPOSITORY="athena"
    local BRANCH="main"
    local FETCH_DEPTH=50
    local DIRECTORY="${REPOSITORY}"

    # Parse command-line arguments
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --org|-o)
                ORG="$2"
                shift 2
                ;;
            --repository|-r)
                REPOSITORY="$2"
                DIRECTORY="${REPOSITORY}"
                shift 2
                ;;
            --branch|-b)
                BRANCH="$2"
                shift 2
                ;;
            --fetch-depth|-f)
                FETCH_DEPTH="$2"
                shift 2
                ;;
            --directory|-d)
                DIRECTORY="$2"
                shift 2
                ;;
            --help|-h)
                echo "Usage: setup-athena-dev-environment [OPTIONS]"
                echo ""
                echo "Options:"
                echo "  --org, -o           Set the CERN GitLab org name (default: atlas)"
                echo "  --repository, -r    Set the repository name (default: athena)"
                echo "  --branch, -b        Set the branch name (default: main)"
                echo "  --fetch-depth, -f   Set the fetch depth (default: 50)"
                echo "  --directory, -d     Set the cloned repository directory name (default: athena)"
                echo "  --help, -h          Show this help message and exit"
                return 0
                ;;
            *)
                echo "Unknown option: $1"
                return 1
                ;;
        esac
    done

    # Ensure DIRECTORY is set before cleanup
    if [[ -z "${DIRECTORY}" ]]; then
        echo "Error: Repository name is not set."
        return 1
    fi

    if [ -d "${DIRECTORY}" ]; then
        echo -e "\n# rm -rf ${DIRECTORY}"
        rm -rf ${DIRECTORY}
    fi

    if [[ "${REPOSITORY}" != "${DIRECTORY}" ]]; then
        echo -e "\n# git clone --no-checkout --depth ${FETCH_DEPTH} --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git ${DIRECTORY}"
    else
        echo -e "\n# git clone --no-checkout --depth ${FETCH_DEPTH} --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git"
    fi
    git clone --no-checkout --depth "${FETCH_DEPTH}" --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git "${DIRECTORY}"

    echo -e "\n# cd ${DIRECTORY}/"
    cd "${DIRECTORY}"

    echo -e "\n# git sparse-checkout init --cone"
    git sparse-checkout init --cone

    echo -e "\n# git sparse-checkout set PhysicsAnalysis Projects Reconstruction"
    git sparse-checkout set PhysicsAnalysis Projects Reconstruction

    echo -e "\n# git switch ${BRANCH}"
    git switch ${BRANCH}

    echo -e "\n# cd -"
    cd -
}
