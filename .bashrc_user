#!/usr/bin/env bash

# If new information was added to ~/.profile in this session
# defer to a tmp profile until the next session.
if [ -f /tmp/.profile ]; then
    . /tmp/.profile
fi
if [ -f /tmp/.bash_profile ]; then
    . /tmp/.bash_profile
fi

# Avoid CVE-2022-24765
# c.f. https://github.blog/2022-04-12-git-security-vulnerability-announced/
export GIT_CEILING_DIRECTORIES="/home"

# Enable .pythonrc.py
if [ -f "${HOME}/.pythonrc.py" ]; then
    export PYTHONSTARTUP="${HOME}/.pythonrc.py"
fi

# Ensure that pip can't install outside a virtual environment
if [ ! -f "${HOME}/.config/pip/pip.conf" ]; then
    export PIP_REQUIRE_VIRTUALENV=true
fi

# Ensure that uv is installed
if ! command -v uv >/dev/null 2>&1; then
    echo "# Installing uv..."
    # Check if pixi exists
    if command -v pixi >/dev/null 2>&1; then
      # Use pixi global
      echo "# Installing with pixi global..."
      pixi global install uv
    else
      # Install from https://astral.sh/
      echo "# Installing from https://astral.sh/..."
      curl -LsSf https://astral.sh/uv/install.sh | sh
    fi

    # Ensure ~/.local/bin is on the PATH for uv
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        export PATH="${HOME}/.local/bin:${PATH}"
    fi
fi

# Avoid needing this by not apt installing python3-pip on the system
# # Activate base environment if it exists and create it if not
# if [ -d "${HOME}/.local/venvs/base" ]; then
#     # Activate the environment but don't update the prompt
#     VIRTUAL_ENV_DISABLE_PROMPT=1 . "${HOME}/.local/venvs/base/bin/activate"
# else
#     echo "# Creating base virtual environment for system..."
#     uv venv --python 3.13 "${HOME}/.local/venvs/base"
# fi

# Enable tab completion of Python virtual environments
if [ -f /opt/_venv-activate/_venv-activate.sh ]; then
    _VENV_ACTIVATE_HOME="${HOME}/.venvs"
    _VENV_ACTIVATE_PYTHON=$(which python3)
    . /opt/_venv-activate/_venv-activate.sh
fi

# Enable pipx shell completions
if [ -f "${HOME}/bin/pipx" ]; then
    eval "$(register-python-argcomplete pipx)"
fi

# Enable h5ls tab completion
if [ -f /opt/_h5ls/_h5ls.sh ]; then
    . /opt/_h5ls/_h5ls.sh
fi

# Add GPG key
export GPG_TTY=$(tty)

# Ensure LD_LIBRARY_PATH exists if application unsets it
if [ -z "${LD_LIBRARY_PATH}" ]; then
    LD_LIBRARY_PATH="${_PRESERVE_LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH;
fi

# Ensure EDITOR is set for use by bash's 'edit-and-execute-command'
if [ -z "${EDITOR}" ]; then
    export EDITOR="$(command -v vim)"
fi

# User Functions

# c.f. https://gist.github.com/matthewfeickert/498cd93af35b6664caab5dece20342e1
# remember to xhost +
function root-docker () {
    local input_path
    input_path="${1}"
    if [ -z "${input_path}" ]; then
        input_path=$(pwd)
    fi

    if [[ "${input_path}" == "shell" ]]; then
        cmd='/bin/bash'
    else
        if [[ "${input_path::7}" == "root://" ]]; then
            # Accessing file over xrootd
            file_path="${input_path}"
        else
            file_path=$(readlink -f ${input_path})
        fi
        cmd="root -l ${file_path}"
    fi

    docker run --rm -ti \
        -e DISPLAY="${DISPLAY}" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /tmp/"krb5cc_$(id -u ${USER})":/tmp/krb5cc_0 \
        -v /tmp/:/tmp/ \
        -v "${HOME}":"${HOME}" \
        atlasamglab/stats-base:root6.24.06 "${cmd}"
}

# c.f.Richard McElreath's 2024-01-26 tweet
# https://twitter.com/rlmcelreath/status/1750807826883027304/
function bibtex-from-doi () {
    # Examples:
    # bibtex-from-doi 10.21105/joss.02823
    # bibtex-from-doi https://doi.org/10.21105/joss.02823
    local doi
    doi="${1}"
    if [ -z "${doi}" ]; then
        echo "Please provide a DOI of the form 10.prefix/suffix"
        return 1
    fi
    # check if the doi is actually a url and if so strip of the url part
    if [[ "${doi}" == "https://doi.org/"* ]]; then
        doi="${doi:16}"
    fi
    curl --location --header "Accept: application/x-bibtex" "https://doi.org/${doi}"
}

# Utility function for https://github.com/conda-forge/staged-recipes
function build-staged-recipe () {
    # Example:
    # build-staged-recipe 12
    local CPU_COUNT
    CPU_COUNT="${1:-10}"
    echo "# docker system prune -f && pixi run lint && CPU_COUNT="${CPU_COUNT}" pixi run build-linux linux64"
    docker system prune -f
    pixi run lint && CPU_COUNT="${CPU_COUNT}" pixi run build-linux linux64
}

# Utility function for setting up ATLAS Athena dev environment
function setup-athena-dev-environment () {
    # Example:
    # setup-athena-dev-environment --org atlas-asg --repository columnar-athena --branch columnar --fetch-depth 50 --directory debug-columnar-athena

    local ORG="atlas"
    local REPOSITORY="athena"
    local BRANCH="main"
    local FETCH_DEPTH=50
    local DIRECTORY="${REPOSITORY}"
    local ORIGIN="origin"

    # Parse command-line arguments
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --org|-o)
                ORG="$2"
                shift 2
                ;;
            --repository|-r)
                REPOSITORY="$2"
                DIRECTORY="${REPOSITORY}"
                shift 2
                ;;
            --branch|-b)
                BRANCH="$2"
                shift 2
                ;;
            --fetch-depth|-f)
                FETCH_DEPTH="$2"
                shift 2
                ;;
            --directory|-d)
                DIRECTORY="$2"
                shift 2
                ;;
            --origin)
                ORIGIN="$2"
                shift 2
                ;;
            --help|-h)
                echo "Usage: setup-athena-dev-environment [OPTIONS]"
                echo -e "\nExample:"
                echo "setup-athena-dev-environment --org atlas-asg --repository columnar-athena --branch columnar --fetch-depth 50 --directory debug-columnar-athena"
                echo ""
                echo "Options:"
                echo "  --org, -o           Set the CERN GitLab org name (default: atlas)"
                echo "  --repository, -r    Set the repository name (default: athena)"
                echo "  --branch, -b        Set the branch name (default: main)"
                echo "  --fetch-depth, -f   Set the fetch depth (default: 50)"
                echo "  --directory, -d     Set the cloned repository directory name (default: athena)"
                echo "  --origin            Set the remote name (default: origin)"
                echo "  --help, -h          Show this help message and exit"
                return 0
                ;;
            *)
                echo "Unknown option: $1"
                return 1
                ;;
        esac
    done

    # Ensure DIRECTORY is set before cleanup
    if [[ -z "${DIRECTORY}" ]]; then
        echo "Error: Repository name is not set."
        return 1
    fi

    if [ -d "${DIRECTORY}" ]; then
        echo -e "\n# rm -rf ${DIRECTORY}"
        rm -rf ${DIRECTORY}
    fi

    if [[ "${REPOSITORY}" != "${DIRECTORY}" ]]; then
        echo -e "\n# git clone --no-checkout --origin ${ORIGIN} --depth ${FETCH_DEPTH} --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git ${DIRECTORY}"
    else
        echo -e "\n# git clone --no-checkout --origin ${ORIGIN} --depth ${FETCH_DEPTH} --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git"
    fi
    git clone --no-checkout --origin "${ORIGIN}" --depth "${FETCH_DEPTH}" --branch ${BRANCH} ssh://git@gitlab.cern.ch:7999/${ORG}/${REPOSITORY}.git "${DIRECTORY}"

    echo -e "\n# cd ${DIRECTORY}/"
    cd "${DIRECTORY}"

    echo -e "\n# git sparse-checkout init --cone"
    git sparse-checkout init --cone

    echo -e "\n# git sparse-checkout set PhysicsAnalysis Projects Reconstruction"
    git sparse-checkout set PhysicsAnalysis Projects Reconstruction

    echo -e "\n# git switch ${BRANCH}"
    git switch ${BRANCH}

    echo -e "\n# cd -"
    cd -
}

# Add pixi shell autocompletion
if [ -d "${HOME}/.pixi/bin" ] ; then
    eval "$(pixi completion --shell bash)"
fi

# Add uv shell autocompletion
# This should always be true given the top of the file
if command -v uv >/dev/null 2>&1; then
    eval "$(uv generate-shell-completion bash)"
fi
