#!/usr/bin/env bash

# If new information was added to ~/.profile in this session
# defer to a tmp profile until the next session.
if [ -f /tmp/.profile ]; then
    . /tmp/.profile
fi
if [ -f /tmp/.bash_profile ]; then
    . /tmp/.bash_profile
fi

# Avoid CVE-2022-24765
# c.f. https://github.blog/2022-04-12-git-security-vulnerability-announced/
export GIT_CEILING_DIRECTORIES="/home"

# Enable .pythonrc.py
if [ -f "${HOME}/.pythonrc.py" ]; then
    export PYTHONSTARTUP="${HOME}/.pythonrc.py"
fi

# Ensure that pip can't install outside a virtual environment
if [ ! -f "${HOME}/.config/pip/pip.conf" ]; then
    export PIP_REQUIRE_VIRTUALENV=true
fi

# Ensure local virtualenv setup
if [ ! -f "${HOME}/opt/venv/bin/virtualenv" ]; then
    curl -sL --location --output /tmp/virtualenv.pyz https://bootstrap.pypa.io/virtualenv.pyz
    python3 /tmp/virtualenv.pyz ~/opt/venv
    ~/opt/venv/bin/pip install --upgrade pip
    ~/opt/venv/bin/pip install virtualenv
    mkdir -p ~/bin  # Ensure exists if new machine
    ln -s ~/opt/venv/bin/virtualenv ~/bin/virtualenv
fi

# Add pyenv
if [ -d "${HOME}/.pyenv/bin" ]; then
    eval "$(pyenv init -)"

    # Place pyenv shims on path
    if [[ ":${PATH}:" != *":$(pyenv root)/shims:"* ]]; then
        eval "$(pyenv init --path)"
    fi
    if [ -d "${HOME}/.pyenv/plugins/pyenv-virtualenv" ]; then
        # Place pyenv-virtualenv shims on path
        if [[ ":${PATH}:" != *":$(pyenv root)/plugins/pyenv-virtualenv/shims:"* ]]; then
            eval "$(pyenv virtualenv-init -)"
        fi
    fi

    # Allow for prompt updating on venv switch
    # c.f. https://github.com/pyenv/pyenv-virtualenv/issues/135#issuecomment-717554081
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    export BASE_PROMPT=$PS1
    function updatePrompt {
        if [[ "$(pyenv version-name)" != "system" ]]; then
            PYENV_VER=$(pyenv version-name)               # capture version name in variable
            export PS1="(${PYENV_VER%%:*}) "$BASE_PROMPT  # grab text prior to first ':' character
        else
            export PS1=$BASE_PROMPT
        fi
    }
    export PROMPT_COMMAND='updatePrompt'

    # default venv
    if [ -d "${HOME}/.pyenv/versions/base" ]; then
        pyenv activate base
    fi

    alias deactivate='pyenv deactivate'
fi

# Enable tab completion of Python virtual environments
if [ -f /opt/_venv-activate/_venv-activate.sh ]; then
    _VENV_ACTIVATE_HOME="${HOME}/.venvs"
    _VENV_ACTIVATE_PYTHON=$(which python3)
    . /opt/_venv-activate/_venv-activate.sh
fi

# Enable pipx shell completions
if [ -f "${HOME}/bin/pipx" ]; then
    eval "$(register-python-argcomplete pipx)"
fi

# Enable h5ls tab completion
if [ -f /opt/_h5ls/_h5ls.sh ]; then
    . /opt/_h5ls/_h5ls.sh
fi

# Add GPG key
export GPG_TTY=$(tty)

# Ensure LD_LIBRARY_PATH exists if application unsets it
if [ -z "${LD_LIBRARY_PATH}" ]; then
    LD_LIBRARY_PATH="${_PRESERVE_LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH;
fi

# Ensure EDITOR is set for use by bash's 'edit-and-execute-command'
if [ -z "${EDITOR}" ]; then
    export EDITOR="$(command -v vim)"
fi

# User Functions

# c.f. https://gist.github.com/matthewfeickert/498cd93af35b6664caab5dece20342e1
# remember to xhost +
function root-docker () {
    local input_path
    input_path="${1}"
    if [ -z "${input_path}" ]; then
        input_path=$(pwd)
    fi

    if [[ "${input_path}" == "shell" ]]; then
        cmd='/bin/bash'
    else
        if [[ "${input_path::7}" == "root://" ]]; then
            # Accessing file over xrootd
            file_path="${input_path}"
        else
            file_path=$(readlink -f ${input_path})
        fi
        cmd="root -l ${file_path}"
    fi

    docker run --rm -ti \
        -e DISPLAY="${DISPLAY}" \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /tmp/"krb5cc_$(id -u ${USER})":/tmp/krb5cc_0 \
        -v /tmp/:/tmp/ \
        -v "${HOME}":"${HOME}" \
        atlasamglab/stats-base:root6.24.06 "${cmd}"
}

# c.f.Richard McElreath's 2024-01-26 tweet
# https://twitter.com/rlmcelreath/status/1750807826883027304/
function bibtex-from-doi () {
    # Examples:
    # bibtex-from-doi 10.21105/joss.02823
    # bibtex-from-doi https://doi.org/10.21105/joss.02823
    local doi
    doi="${1}"
    if [ -z "${doi}" ]; then
        echo "Please provide a DOI of the form 10.prefix/suffix"
        return 1
    fi
    # check if the doi is actually a url and if so strip of the url part
    if [[ "${doi}" == "https://doi.org/"* ]]; then
        doi="${doi:16}"
    fi
    curl --location --header "Accept: application/x-bibtex" "https://doi.org/${doi}"
}

# Utility function for https://github.com/conda-forge/staged-recipes
function build-staged-recipe () {
    # Example:
    # build-staged-recipe 12
    local CPU_COUNT
    CPU_COUNT="${1:-10}"
    echo "# docker system prune -f && pixi run lint && CPU_COUNT="${CPU_COUNT}" pixi run build-linux linux64"
    docker system prune -f
    pixi run lint && CPU_COUNT="${CPU_COUNT}" pixi run build-linux linux64
}

# Add pixi shell autocompletion
if [ -d "${HOME}/.pixi/bin" ] ; then
    eval "$(pixi completion --shell bash)"
fi
